function solution = decision_fcn(Delta,Delta_adj,E2,N_info,C_V,C_E,cap_info,C_b_all,KZ,F,M,M2,w)
% parameters
N_V = N_info.N_V;
N_E = N_info.N_E;
N_J = N_info.N_J;
N_Vb = N_info.N_Vb;
N_Eb = N_info.N_Eb;
N_Vt = N_V+N_Vb;
N_Et = N_E+N_Eb;

Delta_1 = Delta.Delta_1;
Delta_2 = Delta.Delta_2;
Delta_1e = Delta.Delta_1e;
Delta_2e = Delta.Delta_2e;


E_e = E2.e;
E_v = E2.v;
E_t = E2.t;


c_V_list = cap_info.c_V_list;
c_E_list = cap_info.c_E_list;
prob_V_list = cap_info.prob_V_list;
prob_E_list = cap_info.prob_E_list;
cap_ind_V = cap_info.cap_ind_V;
cap_ind_E = cap_info.cap_ind_E;

one_V = ones(N_V,1);
one_E = ones(N_E,1);
one_Vb = ones(N_Vb,1);
one_Eb = ones(N_Eb,1);
one_Vt = ones(N_Vt,1);
one_Et = ones(N_Et,1);
one_J = ones(N_J,1);
one_KZ = ones(KZ,1);

mask_E = zeros(N_Vt,N_J,N_E*size(c_E_list,2));
mask_V = zeros(N_V,N_J,N_V*size(c_V_list,2));

for k = 1:N_E*size(c_E_list,2)
    ind_e = find(cap_ind_E(:,1)<=k & cap_ind_E(:,2)>=k);
    mask_E(:,:,k) = prob_E_list(ind_e,k-(ind_e-1)*size(c_E_list,2));
end

for k = 1:N_V*size(c_V_list,2)
    ind_v = find(cap_ind_V(:,1)<=k & cap_ind_V(:,2)>=k);
    mask_V(:,:,k) = prob_V_list(ind_v,k-(ind_v-1)*size(c_V_list,2));
end

num_e =N_E* size(c_E_list,2);
% num_v =N_E* size(c_V_list,2);
num_v =N_V* size(c_V_list,2);

% variables
% e
X_e = sdpvar(N_Et,N_J,num_e,'full');
D1_e = sdpvar(N_Vt,N_J,num_e,'full');
D2_e = sdpvar(N_Vt,N_J,num_e,'full');

% dual variable
U1_e = sdpvar(N_Vt,N_J,num_e,'full');
U2_e = sdpvar(N_Et,N_J,num_e,'full');
U3_e = sdpvar(N_Vt,N_J,num_e,'full');
U4_e = sdpvar(N_Vt,N_J,num_e,'full');
U5_e = sdpvar(N_Vt,N_J,num_e,'full');
U6_e = sdpvar(N_Vt,N_J,num_e,'full');

h1_e = sdpvar(N_Et,num_e,'full');
h2_e = sdpvar(N_Vt,num_e,'full');
h3_e = sdpvar(N_J,num_e,'full');

Lambda1 = sdpvar(N_Vb,KZ,num_e,'full');
Lambda2 = sdpvar(N_Vb,KZ,num_e,'full');
Lambda1_1 = sdpvar(N_Vb,KZ,num_e,'full');
Lambda2_1 = sdpvar(N_Vb,KZ,num_e,'full');

% v
X_v = sdpvar(N_E,N_J,num_v,'full');
D1_v = sdpvar(N_V,N_J,num_v,'full');
D2_v = sdpvar(N_V,N_J,num_v,'full');

% dual variable
U1_v = sdpvar(N_V,N_J,num_v,'full');
U2_v = sdpvar(N_E,N_J,num_v,'full');
U3_v = sdpvar(N_V,N_J,num_v,'full');
U4_v = sdpvar(N_V,N_J,num_v,'full');
U5_v = sdpvar(N_V,N_J,num_v,'full');
U6_v = sdpvar(N_V,N_J,num_v,'full');

h1_v = sdpvar(N_E,num_v,'full');
h2_v = sdpvar(N_V,num_v,'full');
h3_v = sdpvar(N_J,num_v,'full');
Lambda3 = sdpvar(N_Vb,KZ,num_v,'full');
Lambda3_1 = sdpvar(N_Vb,KZ,num_v,'full');

Z = intvar(N_Vb,KZ,'full');
C_Vb = sdpvar(N_Vb,1);


% constraints not in loop (outer level)
constraints = [Z(:,:) >=0,...
    Z*one_KZ == one_Vb,...
    C_Vb == (Z.*C_b_all)*one_KZ,...
    U2_v >=0,...
    U3_v >=0,...
    U4_v >=0,...
    U5_v >=0,...
    U6_v >=0,...
    h1_v >=0,...
    h2_v >=0,...
    U2_e >=0,...
    U3_e >=0,...
    U4_e >=0,...
    U5_e >=0,...
    U6_e >=0,...
    h1_e >=0,...
    h2_e >=0,...
    Lambda1_1 >=0,...
    Lambda2_1 >=0,...
    Lambda3_1 >=0,...
];


% constraints v
count = 0;
for k1_v = 1:N_V
    for k_c = 1:size(c_V_list,2)
        count = count+1;
        E_temp = E_v{k1_v};
        e_v = zeros(N_V,1);
        e_v(k1_v) = 1;
        C_V_disturbed = C_V;
        C_V_disturbed(k1_v) = c_V_list(k1_v,k_c);        
        constraints = [constraints,...
            E_temp*X_v(:,:,count)==D1_v(:,:,count)+D2_v(:,:,count),...
            X_v(:,:,count)>=0,...
            X_v(:,:,count)*one_J <= C_E,...
            abs(E_temp)*X_v(:,:,count)*one_J <= C_V_disturbed+e_v.*(Delta_adj*C_Vb),...
            D1_v(:,:,count)'*one_V == -D2_v(:,:,count)'*one_V
            D1_v(:,:,count) <= Delta_1*M,...
            -D2_v(:,:,count) <= -Delta_2*M,...
            D1_v(:,:,count) >=0,...
            D2_v(:,:,count) <=0,...
            E_temp'*U1_v(:,:,count)-U2_v(:,:,count)+(h1_v(:,count)+abs(E_temp)'*h2_v(:,count))*one_J' ==0,...
            -one_V*one_J'+one_V*h3_v(:,count)'-U1_v(:,:,count)+U3_v(:,:,count)-U5_v(:,:,count) ==0,...
            one_V*h3_v(:,count)'-U1_v(:,:,count)-U4_v(:,:,count)+U6_v(:,:,count) ==0,...
            one_J'*D1_v(:,:,count)'*one_V == h1_v(:,count)'*C_E+h2_v(:,count)'*C_V_disturbed+one_Vb'*Lambda3_1(:,:,count)*one_KZ+trace(U3_v(:,:,count)'*Delta_1*M)-trace(U4_v(:,:,count)'*Delta_2*M),...
            Lambda3(:,:,count) == C_b_all.*(Delta_adj'*(e_v.*h2_v(:,count))*one_KZ'),...
            Lambda3(:,:,count)-Lambda3_1(:,:,count) >=0
            Lambda3(:,:,count)-Lambda3_1(:,:,count) <= M2*(1-Z);
            Lambda3_1(:,:,count) <= M2*Z,...
        ];
    end
end

% constraints e
count = 0;
for k1_e = 1:N_E
    for k_c = 1:size(c_E_list,2)
        count = count+1;
        E_temp = E_e{k1_e};
        E_b2 = abs(E_temp(N_V+1:end, N_E+1:end));
        C_E_disturbed = C_E;
%         C_E_disturbed(k1_e) = c_V_list(k1_e,k_c);
        C_E_disturbed(k1_e) = c_E_list(k1_e,k_c);
        constraints = [constraints,...
            E_temp*X_e(:,:,count)==D1_e(:,:,count)+D2_e(:,:,count),...
            X_e(:,:,count)>=0,...
            X_e(:,:,count)*one_J <= [C_E_disturbed;(one_Vb'*(E_b2.*(C_Vb*one_Eb')))'],...
            abs(E_temp)*X_e(:,:,count)*one_J <= [C_V;C_Vb],...
            D1_e(:,:,count)'*one_Vt == -D2_e(:,:,count)'*one_Vt
            D1_e(:,:,count) <= Delta_1e*M,...
            -D2_e(:,:,count) <= -Delta_2e*M,...
            D1_e(:,:,count) >=0,...
            D2_e(:,:,count) <=0,...
            E_temp'*U1_e(:,:,count)-U2_e(:,:,count)+(h1_e(:,count)+abs(E_temp)'*h2_e(:,count))*one_J' ==0,...
            -one_Vt*one_J'+one_Vt*h3_e(:,count)'-U1_e(:,:,count)+U3_e(:,:,count)-U5_e(:,:,count) ==0,...
            one_Vt*h3_e(:,count)'-U1_e(:,:,count)-U4_e(:,:,count)+U6_e(:,:,count) ==0,...
            one_J'*D1_e(:,:,count)'*one_Vt == h1_e(1:N_E,count)'*C_E_disturbed+one_Vb'*Lambda1_1(:,:,count)*one_KZ+h2_e(1:N_V,count)'*C_V+one_Vb'*Lambda2_1(:,:,count)*one_KZ+trace(U3_e(:,:,count)'*Delta_1e*M)-trace(U4_e(:,:,count)'*Delta_2e*M),...

            Lambda1(:,:,count) == C_b_all.*(E_b2*h1_e(N_E+1:end,count)*one_KZ'),...
            Lambda1(:,:,count)-Lambda1_1(:,:,count) >=0,...
            Lambda1(:,:,count)-Lambda1_1(:,:,count) <= M2*(1-Z),...
            Lambda1_1(:,:,count) <= M2*Z,...

            Lambda2(:,:,count) == C_b_all.*(h2_e(N_V+1:end,count)*one_KZ'),...
            Lambda2(:,:,count)-Lambda2_1(:,:,count) >=0,...
            Lambda2(:,:,count)-Lambda2_1(:,:,count) <= M2*(1-Z),...
            Lambda2_1(:,:,count) <= M2*Z,...
            ];

    end
end




% constraints = [ E*X==D1+D2,...
%     X(:,:)>=0,...
%     X*one_J <= C_E,...
%     abs(E)*X*one_J <= C_V,...
%     D1'*one_V == -D2'*one_V
%     D1 <= Delta_1*M,...
%     -D2 <= -Delta_2*M,...
%     D1 >=0,...
%     D2 <=0
% ];
% 
% constraints = [ constraints,...
%     E'*U1-U2+(h1+abs(E)'*h2)*one_J' ==0,...
%     -one_V*one_J'+one_V*h3'-U1+U3-U5 ==0,...
%     one_V*h3'-U1-U4+U6 ==0,...
%     U2 >=0,...
%     U3 >=0,...
%     U4 >=0,...
%     U5 >=0,...
%     U6 >=0,...
%     h1 >=0,...
%     h2 >=0,...
%     one_J'*D1'*one_V == h1'*C_E+h2'*C_V+trace(U3'*Delta_1*M)-trace(U4'*Delta_2*M)
% ];


obj=-sum(sum(sum(D1_v.*mask_V,1),2),3)-sum(sum(sum(D1_e.*mask_E,1),2),3)+w*one_Vb'*(Z.*F)*one_KZ;
options = sdpsettings('verbose',0,'solver','gurobi');

sol = optimize(constraints,obj,options);

% Analyze error flags
if sol.problem == 0
 % Extract and display value
 solution.obj = value(obj);
 solution.Z = value(Z);
%  solution.Xe = value(X_e);
%  solution.Xv = value(X_v);
%  solution.D1 = D1;
%  solution.D2 = D2;
else
 display('Hmm, something went wrong!');
 sol.info
 yalmiperror(sol.problem);
end
end
